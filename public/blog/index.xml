<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog posts on Data Science Blog</title>
    <link>https://federicagazzelloni.netlify.app/blog/</link>
    <description>Recent content in Blog posts on Data Science Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 11 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://federicagazzelloni.netlify.app/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yarn: hierarchical edge bundling visualization</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/yarn/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/yarn/</guid>
      <description>Overview     This post is all about hierarchical edge bundling visualization, the dataset comes from #TidyTuesday 2022 week 41 Ravelry data.
The picture below is the result of the hierarchical edge bundling visualization.
First thing load the libraries and set the fonts:
library(tidyverse) library(igraph) library(ggraph) library(RColorBrewer) library(showtext) library(sysfonts) library(extrafont) showtext::showtext_auto() showtext::showtext_opts(dpi=320) font_add_google(name=&amp;#34;Pangolin&amp;#34;,family=&amp;#34;pangolin&amp;#34;) An helpful tip is how to set the dpi option inside the showtext::showtext_opts function. This sets the size of your text, and it can be very useful when used in conjunction with the same option inside the ggsave function.</description>
    </item>
    
    <item>
      <title>Oregon Spotted a frog: Rana Pretiosa</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/oregonfrogs/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/oregonfrogs/</guid>
      <description>Overview     This #TidyTuesday week 31 is all about Oregon Spotted a frog: Rana Pretiosa.
Load the {tidyverse} and the data from: #TidyTuesday GitHub repo
frogs &amp;lt;- readr::read_csv(&amp;#34;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-02/frogs.csv&amp;#34;) Or, as I made a package of these data, the dataset can be installed via:
# install.packages(&amp;#34;remotes&amp;#34;) remotes::install_github(&amp;#34;fgazzelloni/oregonfrogs&amp;#34;) And then:
library(oregonfrogs) data(package = &amp;#34;oregonfrogs&amp;#34;) More about Oregon Frogs and spatial modeling is in this R-Ladies DC talk:
   This is the final code for assembling all plots saved in the container images folder using {cowplot} package.</description>
    </item>
    
    <item>
      <title>European flights</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/european_flights/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/european_flights/</guid>
      <description>Overview     This #TidyTuesday week 28 is all about European flights. I was looking for a visualization that would represent the differences among countries in terms of the number of airports versus number of flights. I looked on the internet for getting some inspiration and then landed on Pintarest, where I found exactly what I was hoping for: a Sankey! First of all, What is a Sankey?</description>
    </item>
    
    <item>
      <title>Statistics</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/statistics/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/statistics/</guid>
      <description>Overview     This is one of my favourite visualizations. It looks like very simple, and straight forward with the use of the ggdist::stat_dots function to make dotted ditributions of the wages by highest educational status reached.
The Tidyverse libraries needed for the data manipulation:
library(tidyverse) The data set is the Wage dataset from the {ISLR2} package. This package contains a variety of datasets used for statistical analysis in An Introduction to Statistical Learning book.</description>
    </item>
    
    <item>
      <title>Erasmus students exchange</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/erasmus/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/erasmus/</guid>
      <description>Overview     This week 10 of #TidyTuesday 2022 theme is #Erasmus students exchange in the European countries.
The data set is from Erasmus student mobility, Data.Europa.eu and Wimdu.co to discover the most popular Erasmus destinations.
The idea is to make a network of sending and receiving countries, let&amp;rsquo;s have a look at the data.
if(!require(pacman)) install.packages(&amp;#34;pacman&amp;#34;) pacman::p_load(tidyverse, ggbump, cowplot, wesanderson) erasmus &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-08/erasmus.csv&amp;#39;) The set is made of information about students, such as the age, the nationality, the lenght of stay, the gender, academic year, and others.</description>
    </item>
    
    <item>
      <title>DuBois Challenge 2022</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/dubois/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/dubois/</guid>
      <description>Overview   This week is all about #DuBoisChallenge2022, I choose plate number 6.
library(tidyverse) Load #TidyTuesday 2022/07 data     plate6 &amp;lt;- read_csv(&amp;#39;https://raw.githubusercontent.com/ajstarks/dubois-data-portraits/master/challenge/2022/challenge06/data.csv&amp;#39;)  Add a column with distances     df &amp;lt;- plate6 %&amp;gt;% janitor::clean_names() %&amp;gt;% mutate(x_axis=c(1860,1860-cumsum(diff(iliteracy_rate)))) df  Create axis lables vectors     iliteracy_rate&amp;lt;-df$iliteracy_rate x_axis &amp;lt;-df$x_axis  Fonts     library(showtext) font_add(family = &amp;#34;Public Sans Thin&amp;#34;, regular = &amp;#34;PublicSans-Thin.</description>
    </item>
    
    <item>
      <title>Dog breeds</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/dogbreeds/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/dogbreeds/</guid>
      <description>Overview     This #TidyTuesday post is all about drawing with R. I have replicated the dogs&#39; prints (or paws) using R. For solving this kind of tasks you need to be very &amp;ldquo;practice&amp;rdquo; with functions outcomes. And this means to have in mind the shape the function will take. For example we know that \(y = x^2\) would shape a parabolic function.
So that, I decided to get some extra inspiration and used the ggforce::geom_ellipse() function to produce ellipses of different sizes.</description>
    </item>
    
    <item>
      <title>Network of game mechanics</title>
      <link>https://federicagazzelloni.netlify.app/blog/data_visualization/network/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicagazzelloni.netlify.app/blog/data_visualization/network/</guid>
      <description>Overview     I&amp;rsquo;ve chosen this graphic for my blog because it turned out to be very interesting. As you can see reading through the article, the shape of the network changes along with the change of the parameters.
The dataset I&amp;rsquo;ve used for making this network comes from  #TidyTuesday 2022 week 4 Board games.
The picture below is the result of the network visualization.
The first step is to load the library needed for making the manupulations.</description>
    </item>
    
  </channel>
</rss>
